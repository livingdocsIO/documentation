title: Import Documents

history:
  - release: release-2022-05
    description: Allow to pass `flags.unpublish` and `id`, `checksum` together with `unpublish`
  - release: release-2023-05
    description: Make `content`, `metadata`, `design` optional. `livingdoc.content` and `livingdoc.design` moved to the entry root.

description: |
  The document import does both create and update documents. The import remembers the `externalId` / `systemName` pair and if an import matches an existing pair, it will update (Hint: consider how to rebuild the externalId when you want to update documents). The document import in Livingdocs is asynchronous. You post a batch of documents that you want to import and get back an id with which you can query later to get your result.

useCases: |
  - [Initial Import from a legacy system]({{< ref "/guides/setup/import-legacy-system-documents" >}})
  - Feed Imports e.g. [DPA Import]({{< ref "/guides/integrations/dpa-import" >}})

scopes: public-api:write
query: |
  ACCESS_TOKEN=ey1234
  curl -k -X POST "https://server.livingdocs.io/api/:apiVersion/import/documents" \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json; charset=utf-8" \
    --data-binary @- << EOF
    {
      "systemName": "identifier-for-your-system",
      "webhook": "https://my-domain.com/webhooks/document-import",
      "documents": []
    }
    EOF
endpoint:
  method: POST
  path: /api/:apiVersion/import/documents

parameters:
  - name: systemName
    type: string
    required: true
    notes: 'Identifier for the system you are importing from, e.g. an archive'
  - name: webhook
    type: uri
    required: false
    notes: 'Endpoint at the importing system that gets notified by POST when import job is done. Notification contains the id of the import job, the state and an overview.'
  - name: context
    type: object
    required: false
    notes: 'An object that is passed as context in the body of the request to the webhook. Limited to 8192 Bytes.'
  - name: documents
    type: array
    required: true
    notes: |
      An array of documents to import. Each entry is an object with the following keys:

      **id:** a unique id (stored as externalId in Livingdocs) that identifies the document on your end, must be unique within your project.

      **title:** the title that the document should get in livingdocs

      **checksum:** string to identify changes, e.g. an updated_at timestamp

      **contentType:** the content type that the document should get in livingdocs

      **publishControl:** An object with
        - `firstPublicationDate`: sets the first publication date
        - `significantPublicationDate`: ({{< added-in "release-2023-07" >}}) sets a date which can be used by deliveries to display to viewers
        - `visiblePublicationDateOverride`: ({{< added-in "release-2024-01" >}}) sets a date which can be used by deliveries to display to viewers
        - `lastPublicationDate`: sets the most recent publication date
        The `autoPublish` flag must be set for 'publishControl' to have an effect.

      **publicationDate:** ({{< deprecated-in "release-2023-03" >}})
        Please use `publishControl.lastPublicationDate`. Sets the most recent publication date. The `autoPublish` flag must be set for this to have an effect.

      **content:** (optional) An array of livingdocs components, must conform to your channel-config otherwise throws a validation error

      **design:** (optional) An object with `name` and `version`. If no design is set it takes the design of the Project Config with the latest version

      **metadata:** (optional) An object of metadata, must conform to your channel-config otherwise throws a validation error

      **translations:** (optional) An object of translations

      **flags:** (optional) define additional import logic:
        - `autoPublish`: publishes imported documents immediately
        - `unpublish`: unpublishes imported documents immediately
        - `onlyOverwriteUntouched`: only update documents that have no manual changes in livingdocs
        - `neverOverwrite`: never update documents through the import API

example_request: |
  {
    "systemName": "identifier-for-your-system",
    "webhook": "https://my-domain.com/webhooks/document-import",
    "context": {
      "myIdentifier": "some-identifier-sent-to-the-webhook"
    },
    "documents": [
      {
        "id": "123abc",
        "title": "test import",
        "contentType": "article",
        "checksum": "xyz456",
        "publishControl": {
          "firstPublicationDate": "1999-03-18T17:27:00.107Z",
          "significantPublicationDate": "1999-03-19T17:27:00.107Z",
          "lastPublicationDate": "1999-03-20T17:27:00.107Z",
        },
        "content": [
          {
            "identifier": "header",
            "content": {
              "catchline": "imported catchline",
              "title": "imported title",
              "author": "imported author"
            }
          }
        ],
        "design": {
          "name": "living-times",
          "version": "1.0.1"
        },
        "metadata": {
          "description": "foo"
        },
        "translations": [
          {
            "locale": "fr",
            "metadata": {
              "description": "foo FR"
            }
          }
        ],
        "flags": {
          "autoPublish": true
        }
      }
    ]
  }

responses:
  - code: '200'
    endpoint: /api/:apiVersion/import/documents
    body: |
      {
        "id": "25bzj8j"
      }

openapi:
  security:
    - bearerAuth:
        - public-api:write
  tags:
    - Imports
  operationId: getImportDocuments
  summary: Import Documents
  description: 'The document import does both create and update documents. The
    import remembers the `externalId` / `systemName` pair and if an import matches
    an existing pair, it will update (Hint: consider how to rebuild the `externalId`
    when you want to update documents). The document import in Livingdocs is asynchronous.
    You post a batch of documents that you want to import and get back an id with
    which you can query later to get your result.'
  requestBody:
    content:
      application/json:
        examples:
          example:
            value:
              systemName: identifier-for-your-system
              webhook: https://my-domain.com/webhooks/document-import
              context:
                myIdentifier: some-identifier-sent-to-the-webhook
              documents:
                - id: 123abc
                  title: test import
                  contentType: article
                  checksum: xyz456
                  publicationDate: '1999-03-18T17:27:00.107Z'
                  livingdoc:
                    content:
                      - identifier: header
                        content:
                          catchline: imported catchline
                          title: imported title
                          author: imported author
                    design:
                      name: living-times
                      version: 1.0.1
                  metadata:
                    description: foo
                  translations:
                    - locale: fr
                      metadata:
                        description: foo FR
                  flags:
                    autoPublish: true
        schema:
          type: object
          required:
            - systemName
            - documents
          properties:
            systemName:
              type: string
              description: Identifier for the system you are importing from, e.g.
                an archive
            webhook:
              type: string
              format: uri
              description: Endpoint at the importing system that gets notified
                by POST when import job is done. Notification contains the id
                of the import job, the state and an overview.
            context:
              type: object
              description: An object that is passed as context in the body of
                the request to the webhook. Limited to 8192 Bytes.
            documents:
              description: An array of documents to import. Each entry is an object.
              type: array
              items:
                type: object
                required:
                  - id
                  - checksum
                  - title
                  - contentType
                  - publicationDate
                  - livingdoc
                  - metadata
                properties:
                  id:
                    type: string
                    description: a unique id (stored as externalId in Livingdocs)
                      that identifies the document on your end, must be unique
                      within your project.
                  title:
                    type: string
                    description: the title that the document should get in livingdocs
                  checksum:
                    type: string
                    description: string to identify changes, e.g. an updated_at
                      timestamp
                  contentType:
                    type: string
                    description: the content type that the document should get
                      in livingdocs
                  publicationDate:
                    type: string
                    format: date-time
                    description: sets the date of a publication. `autoPublishâ€™
                      flag must be set for this to have an effect.
                  livingdoc:
                    type: object
                    description: 'A valid livingdoc declaration (content / design),
                      must conform to your channel-config otherwise throws a validation
                      error / release-2022-07: if no design is set it takes the
                      design of the Project Config.'
                  metadata:
                    type: object
                    description: An object of metadata, must conform to your channel-config
                      otherwise throws a validation error
                  translations:
                    type: array
                    items:
                      type: object
                    description: sets the date of a publication. `autoPublish`
                      flag must be set for this to have an effect.
                  flags:
                    type: object
                    description: "(optional) define additional import logic: \n`autoPublish`:
                      publishes imported documents immediately \n`unpublish`:
                      unpublishes imported documents immediately (release-2022-07)\n`onlyOverwriteUntouched`:
                      only update documents that have no manual changes in livingdocs\n`neverOverwrite`:
                      never update documents through the import API"
  responses:
    '200':
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
          examples:
            success:
              value:
                id: 25bzj8j
    '429':
      description: Usage Limit Exceeded
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
          examples:
            usageLimitExceeded:
              value:
                status: 429
                error: Usage Limit Exceeded
                error_details:
                  message: |-
                    Your plan does not allow you to upload more than 100 per day.
                          You already uploaded 99 in the last 24 hours and are trying to upload 10 more.
                          Please try again later.
