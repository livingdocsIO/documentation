title: Search Publications

history:
  - release: release-2024-03
    description: Added `ignoreComponentConditions` and `componentConditions` query parameters.
  - release: release-2023-07
    description: Added `filters` query parameter to support the [Public API Search DSL]({{< ref "/reference/public-api/publications/search-filters" >}}).

description: |
  This endpoint allows filtering for published documents.

useCases: |
  - Automatic teaser lists like topic pages (filtered by Metadata properties)
  - [Ticker Tool]({{< ref "/operations/releases/release-2023-09#ticker-tool" >}})

  >[!WARNING]
  > Even when it's possible to make a full-text search to this endpoint, it's not thought to be used by a frontend search (because of performance reasons)

scopes: public-api:read
query: |
  ACCESS_TOKEN=ey1234
  curl -k -X GET "https://server.livingdocs.io/api/:apiVersion/publications/search" \
    -H "Authorization: Bearer $ACCESS_TOKEN"
endpoint:
  method: GET
  path: /api/:apiVersion/publications/search
parameters:
  - name: ?search
    type: string
    required: false
    notes: Search term to perform a full-text search with. For exact word matches use “, e.g. `search=“Ukulele”`
  - name: ?contentTypes
    type: string
    required: false
    notes: "Comma separated list of content-types for which documents should be found. Content types are concatenated with OR. Example: 'regular,author'"
  - name: ?categories
    type: string
    required: false
    notes: "Comma separated list of category ids for which documents should be found. Categories are concatenated with OR. Example: 'sport,fashion'"
  - name: ?languages
    type: string
    required: false
    notes: "Comma separated list of languages for which documents should be found. Languages are concatenated with OR. Example: 'en,de'"
  - name: ?languageGroupId
    type: string
    required: false
    notes: |
      A GroupId used to fetch all translations of a document.  
      Using the `?languages` param a document in a specific language can be fetched.  
      Example: `?languageGroupId=47&language=de`
  - name: ?filters
    type: string
    required: false
    notes: 'A JSON string which follows the [search filters query DSL]({{< ref "/reference/public-api/publications/search-filters" >}})'
  - name: ?sort
    type: string
    required: false
    notes: |
      Comma separated list of sort properties. Any of the [Sort Fields]({{< ref "/reference/public-api/publications/search-filters#sort-fields" >}}) can be used. The sort order can be reversed by prefixing the property with a `-`
  - name: ?fields
    type: string
    required: false
    notes: |
      Comma separated list of properties to include in the response. Defaults to `systemdata,metadata,content`. Use `id` if you only want to retrieve the ids of the published documents. Useful (and faster) if you are fully synchronizing your frontend with the publication events
  - name: ?limit
    type: integer
    required: false
    notes: 'A limit for how much published documents to retrieve. Defaults to 10. Max. 100'
  - name: ?offset
    type: integer
    required: false
    notes: 'An offset into the query. Useful when getting more than 100 results (pagination). Max. 10000'
  - name: ?ignoreComponentConditions
    type: boolean
    required: false
    notes: |
      {{< added-in "release-2024-03" >}}

      Provides a way to opt out of component filtering and return all content regardless of whether each component passes the conditional checks.

      Default: `false`
  - name: ?componentConditions
    type: string
    required: false
    notes: |
      {{< added-in "release-2024-03" >}}

      JSON stringified object which contains the component conditions you would like to apply.

      Default: `dateTime: new Date()`  
      Example: `?componentConditions={"dateTime":"2024-02-14T17:25:10.391Z"}`

responses:
  - code: '200'
    endpoint: /api/:apiVersion/publications/search?search=Obama
    body: |
      [
        {
          "systemdata": {
            "projectId": 1,
            "channelId": 1,
            "documentId": 1,
            "contentType": "article",
            "documentType": "article",
            "design": {
              "name": "timeline",
              "version": "1.1.0"
            }
          },
          "metadata": {
            "title": "Obama re-elected",
            "description": "some lead",
            "dependencies": {},
            "testDependency": "li-test-dependency.onUpdate is correct"
          },
          "content": [
            {
              "id": "doc-1b8i1ksh10",
              "component": "head",
              "identifier": "timeline.head",
              "content": {
                "title": "Obama re-elected",
                "text": "some lead"
              }
            },
            {
              "id": "doc-1b8i1ksh20",
              "component": "normal",
              "identifier": "timeline.normal",
              "content": {
                "caption": "my caption"
              },
              "styles": {
                "position": "left"
              }
            },
            {
              "id": "doc-1b8i1ksh30",
              "component": "p",
              "identifier": "timeline.p",
              "content": {
                "text": "first paragraph"
              }
            },
            {
              "id": "doc-1b8i1me1d0",
              "component": "p",
              "identifier": "timeline.p",
              "content": {
                "text": "second paragraph"
              }
            }
          ]
        }
      ]

  - code: '200'
    endpoint: /api/:apiVersion/publications/search?categories=sport,fashion&languages=en
    body: |
      [
        {
          "systemdata": {
            "projectId": 1,
            "channelId": 1,
            "documentId": 1,
            "contentType": "article",
            "documentType": "article",
            "design": {
              "name": "timeline",
              "version": "1.1.0"
            }
          },
          "metadata": {
            "title": "Bayern to win Champions League",
            "description": "some lead",
            "category": {
              "id": "sport"
            },
            "language": {
              "locale": "en"
            },
            "dependencies": {},
            "testDependency": "li-test-dependency.onUpdate is correct"
          },
          "content": [
            {
              "id": "doc-1b8i1ksh10",
              "component": "head",
              "identifier": "timeline.head",
              "content": {
                "title": "Bayern to win Champions League",
                "text": "some lead"
              }
            },
            {
              "id": "doc-1b8i1ksh20",
              "component": "normal",
              "identifier": "timeline.normal",
              "content": {
                "caption": "my caption"
              },
              "styles": {
                "position": "left"
              }
            },
            {
              "id": "doc-1b8i1ksh30",
              "component": "p",
              "identifier": "timeline.p",
              "content": {
                "text": "first paragraph"
              }
            },
            {
              "id": "doc-1b8i1me1d0",
              "component": "p",
              "identifier": "timeline.p",
              "content": {
                "text": "second paragraph"
              }
            }
          ]
        }
      ]

  - code: '200'
    endpoint: /api/:apiVersion/publications/search?contentTypes=regular,gallery&limit=10&offset=10
    body: |
      [
        {
          "systemdata": {
            "projectId": 1,
            "channelId": 1,
            "documentId": 1,
            "contentType": "regular",
            "documentType": "article",
            "design": {
              "name": "timeline",
              "version": "1.1.0"
            }
          },
          "metadata": {
            "title": "Bayern to win Champions League",
            "description": "some lead",
            "category": {
              "id": "sport"
            },
            "language": {
              "locale": "en"
            },
            "dependencies": {},
            "testDependency": "li-test-dependency.onUpdate is correct"
          },
          "content": [
            {
              "id": "doc-1b8i1ksh10",
              "component": "head",
              "identifier": "timeline.head",
              "content": {
                "title": "Bayern to win Champions League",
                "text": "some lead"
              }
            },
            {
              "id": "doc-1b8i1ksh20",
              "component": "normal",
              "identifier": "timeline.normal",
              "content": {
                "caption": "my caption"
              },
              "styles": {
                "position": "left"
              }
            },
            {
              "id": "doc-1b8i1ksh30",
              "component": "p",
              "identifier": "timeline.p",
              "content": {
                "text": "first paragraph"
              }
            },
            {
              "id": "doc-1b8i1me1d0",
              "component": "p",
              "identifier": "timeline.p",
              "content": {
                "text": "second paragraph"
              }
            }
          ]
        }
      ]

  - code: '200'
    endpoint: /api/:apiVersion/publications/search?contentTypes=article&limit=999&fields=id
    body: |
      [
        {
          "documentId": 1,
          "projectId": 1
        },
        {
          "documentId": 2,
          "projectId": 1
        }
      ]

openapi:
  security:
    - bearerAuth:
        - public-api:read
  tags:
    - Publications
  operationId: searchPublications
  summary: Search Publications
  description: Search Publications
  parameters:
    - name: search
      description: Search term to perform a full-text search with. For exact word matches use “, e.g. `search=“Ukulele”`
      in: query
      schema:
        type: string
      examples:
        search:
          value: some sentence to search
    - name: contentTypes
      description: "Comma separated list of content-types for which documents should be found. Content types are concatenated with OR. Example: 'regular,author'"
      in: query
      schema:
        type: string
      examples:
        regularAndAuthor:
          value: regular,author
    - name: categories
      description: "Comma separated list of category ids for which documents should be found. Categories are concatenated with OR. Example: 'sport,fashion'"
      in: query
      schema:
        type: string
      examples:
        categories:
          value: sport,fashion
    - name: languages
      description: "Comma separated list of languages for which documents should be found. Languages are concatenated with OR. Example: 'en,de'"
      in: query
      schema:
        type: string
      examples:
        enAndDe:
          value: en,de
    - name: languageGroupId
      description: 'A GroupId used to fetch all translations of a document Using
        the ?languages param a document in a specific language can be fetched. Example:
        `?languageGroupId=47?language=de`'
      in: query
      schema:
        type: string
      examples:
        languageGroupId:
          value: 1jfasfdu
    - name: filters
      description: A JSON string which follows the search filters query DSL.
      in: query
      schema:
        type: string
      examples:
        termFilter:
          value: '[{"key":"metadata.title","term":"My Title"}]'
    - name: sort
      description: Comma separated list of sort properties. Any of the filter fields
        can be used, and also sortDate, which can be defined using the publication
        index config, or will be the Visible Publication Date. Most metadata properties
        can be used to sort, but not those indexed as 'text' or 'boolean'. The sort
        order can be reversed by prefixing the property with a `-`. Documents which
        don't have an indexed value will appear at the end of the results.
      in: query
      schema:
        type: string
      examples:
        sortDate:
          value: sortDate
        descendingDocumentId:
          value: -documentId

    - name: fields
      description: Filters which (comma separated) properties are included in the
        response. Defaults to `systemdata,metadata,content` (no renditions). Use
        `id` if you only want to retrieve the ids of the published documents. Useful
        (and faster) if you are fully synchronizing your frontend with the publication
        events.
      in: query
      schema:
        type: string
      examples:
        default:
          value: systemdata,metadata,content
    - name: limit
      description: A limit for how much published documents to retrieve. Defaults
        to 10. Max. 100.
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 100
      examples:
        default:
          value: 10
    - name: offset
      description: An offset into the query. Useful when getting more than 100 results
        (pagination)
      in: query
      schema:
        type: integer
      examples:
        default:
          value: 0
    - name: ignoreComponentConditions
      description: Provides a way to opt out of component filtering and return all content regardless of whether each component passes the conditional checks.
      in: query
      schema:
        type: boolean
      examples:
        default:
          value: false
    - name: componentConditions
      description: JSON stringified object which contains the component conditions you would like to apply.
      in: query
      schema:
        type: string
      examples:
        atASpecificTime:
          value: '{"dateTime":"2024-02-14T17:25:10.391Z"}'
  responses:
    '200':
      description: ok
