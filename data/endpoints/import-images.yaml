title: Import Images
description: |
  The image import creates image entries in the Media Library and upload the image asset to the configured blob storage. The image import in Livingdocs is asynchronous. You post a batch of images that you want to import and get back a jobId that you can use to retrieve the import job state.

  You can patch existing media library entries with the [patch endpoint]({{< ref "/reference/public-api/media-library" >}}).

useCases: |
  - [Initial import from a legacy system]({{< ref "/guides/setup/import-legacy-system-documents" >}}) - When doing an initial import one usually first imports all images and then imports documents referencing the images.

scopes: public-api:write
query: |
  ACCESS_TOKEN=ey1234
  curl -k -X POST "https://server.livingdocs.io/api/:apiVersion/import/images" \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json; charset=utf-8" \
    --data-binary @- << EOF
    {
      "systemName": "identifier-for-your-system",
      "webhook": "https://my-domain.com/webhooks/image-import",
      "images": [
        {
          "url": "https://placekitten.com/800/600",
          "id": "123abc",
          "fileName": "cat",
          "metadata": {
            "caption": "foo"
          }
        }
      ]
    }
    EOF
endpoint:
  method: POST
  path: /api/:apiVersion/import/images
parameters:
  - name: systemName
    type: string
    required: true
    notes: 'Identifier for the system you are importing from, e.g. an archive'
  - name: webhook
    type: uri
    required: false
    notes: 'Endpoint at the importing system that gets notified by POST when import job is done. Notification contains the id of the import job, the state and an overview.'
  - name: context
    type: object
    required: false
    notes: 'An object that is passed as context in the body of the request to the webhook. Limited to 8192 Bytes.'
  - name: images
    type: array
    required: true
    notes: |
      An array of images to import. Each entry is an object with the following keys, all of which are required:
      - **url:** a URL to an image file, no data urls allowed, allowed types: png, jpg, gif, svg<br>
      - **id:** a unique id (stored as externalId in Livingdocs) that identifies the image on your end, must be unique within your project<br>
      - **fileName:** the title that the image should get in livingdocs<br>
      - **metadata:** An object of metadata according to your project config<br>
      - **mediaType:** The handle of one of the mediaTypes from your project configuration

example_request: |
  {
    "systemName": "identifier-for-your-system",
    "webhook": "https://my-domain.com/webhooks/image-import",
    "context": {
      "myIdentifier": "some-identifier-sent-to-the-webhook"
    },
    "images": [
      {
        "url": "https://placekitten.com/800/600",
        "id": "123abc",
        "fileName": "cat",
        "metadata": {
          "caption": "foo"
        }
      }
    ]
  }

responses:
  - code: '200'
    endpoint: /api/:apiVersion/import/images
    body: |
      {
        "id": "25bzj8j"
      }

openapi:
  security:
    - bearerAuth:
        - public-api:write
  tags:
    - Imports
  operationId: importImage
  summary: Import Images
  description: 'The image import does both create and update images. The import
    remembers the `externalId` / `systemName` pair and if an import matches an
    existing pair, it will update (Hint: consider how to rebuild the `externalId`
    when you want to update images). The image import in Livingdocs is asynchronous.
    You post a batch of images that you want to import and get back an id with
    which you can query later to get your result.'
  requestBody:
    content:
      application/json:
        schema:
          type: object
          examples:
            - systemName: identifier-for-your-system
              webhook: https://my-domain.com/webhooks/image-import
              context:
                myIdentifier: some-identifier-sent-to-the-webhook
              images:
                - url: https://placekitten.com/800/600
                  id: 123abc
                  fileName: cat
                  mediaType: image
                  metadata:
                    title: kitten
          required:
            - systemName
            - images
          properties:
            systemName:
              type: string
              description: Identifier for the system you are importing from, e.g.
                an archive
            webhook:
              type: string
              format: uri
              description: Endpoint at the importing system that gets notified
                by POST when import job is done. Notification contains the id
                of the import job, the state and an overview.
            context:
              type: object
              description: An object that is passed as context in the body of
                the request to the webhook. Limited to 8192 Bytes.
            images:
              description: 'An array of images to import. Each entry is an object
                with the following keys, all of which are required:'
              type: array
              items:
                type: object
                required:
                  - id
                  - url
                  - fileName
                  - metadata
                  - mediaType
                properties:
                  id:
                    type: string
                    description: a unique id (stored as externalId in Livingdocs)
                      that identifies the document on your end, must be unique
                      within your project.
                  url:
                    type: string
                    format: uri
                    description: 'a URL to an image file, no data urls allowed,
                      must be an image, allowed types: png, jpg, gif, svg'
                  fileName:
                    type: string
                    description: the title that the image should get in livingdocs
                  metadata:
                    type: object
                    description: An object of metadata according to your project
                      config
                  mediaType:
                    type: string
                    description: the handle of one of the mediaTypes from your
                      project configuration
  responses:
    '200':
      description: ok
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
            examples:
              - id: 25bzj8j
    '429':
      description: Usage Limit Exceeded
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
            examples:
              - status: 429
                error: Usage Limit Exceeded
                error_details:
                  message: |-
                    Your plan does not allow you to upload more than 100 per day.
                          You already uploaded 99 in the last 24 hours and are trying to upload 10 more.
                          Please try again later.
