title: Import Files
description: |
  The file import does both create and update files. The import remembers the `externalId` / `systemName` pair and if an import matches an existing pair, it will update (Hint: consider how to rebuild the externalId when you want to update files). The file import in Livingdocs is asynchronous. You post a batch of files that you want to import and get back an id with which you can query later to get your result.

  #### Related

  - [Document Import API]({{< ref "/reference/public-api/imports/documents" >}})
  - [Import Media Library Entries]({{< ref "/reference/public-api/imports/media-library-entries" >}})

useCases: |
  - [Initial import from a legacy system]({{< ref "/guides/setup/import-legacy-system-documents" >}}) - When doing an initial import one usually first imports all files and then imports documents referencing the files.

scopes: public-api:write
query: |
  ACCESS_TOKEN=ey1234
  curl -k -X POST "https://server.livingdocs.io/api/v1/import/files" \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json; charset=utf-8" \
    --data-binary @- << EOF
    {
      "systemName": "identifier-for-your-system",
      "webhook": "https://my-domain.com/webhooks/file-import",
      "files": [
        {
          "url": "https://placekitten.com/800/600",
          "id": "123abc",
          "fileName": "cat",
          "metadata": {
            "caption": "foo"
          }
        }
      ]
    }
    EOF
endpoint:
  method: POST
  path: /api/v1/import/files


example_request: |
  {
    "systemName": "identifier-for-your-system",
    "webhook": "https://my-domain.com/webhooks/file-import",
    "context": {
      "myIdentifier": "some-identifier-sent-to-the-webhook"
    },
    "files": [
      {
        "url": "https://placekitten.com/800/600",
        "id": "123abc",
        "fileName": "cat",
        "metadata": {
          "caption": "foo"
        }
      }
    ]
  }


parameters:
  - name: systemName
    type: string
    required: true
    notes: "Identifier for the system you are importing from, e.g. an archive."
  - name: webhook
    type: uri
    required: false
    notes: "Endpoint at the importing system that gets notified by POST when import job is done. Notification contains the id of the import job, the state and an overview."
  - name: context
    type: object
    required: false
    notes: "An object that is passed as context in the body of the request to the webhook. Limited to 8192 Bytes."
  - name: files
    type: array
    required: true
    notes: |
      An array of files to import. Each entry is an object with the following keys, all of which are required:
      - **url:** a URL to a file
      - **id:** a unique id (stored as externalId in Livingdocs) that identifies the file on your end, must be unique within your project
      - **fileName:** the title that the file should get in livingdocs
      - **metadata:** An object of metadata according to your project config
      - **mediaType**: The handle of one of the mediaTypes from your project configuration
responses:
  - code: "200"
    name: OK
    endpoint: /api/v1/import/files
    body: |
      {
        "id": "25bzj8j"
      }
